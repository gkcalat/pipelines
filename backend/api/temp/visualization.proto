// Copyright 2019 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/kubeflow/pipelines/backend/api/v2beta1/go_client";
package api;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "backend/api/v2beta1/error.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  responses: {
    key: "default";
    value: {
      schema: {
        json_schema: {
          ref: ".api.Status";
        }
      }
    }
  }
  // Use bearer token for authorizing access to job service.
  // Kubernetes client library(https://kubernetes.io/docs/reference/using-api/client-libraries/)
  // uses bearer token as default for authorization. The section below
  // ensures security definition object is generated in the swagger definition.
  // For more details see https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securityDefinitionsObject
  security_definitions: {
    security: {
      key: "Bearer";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "authorization";
      }
    }
  }
  security: {
    security_requirement: {
      key: "Bearer";
      value: {};
    }
  }
};

service VisualizationService {
  rpc CreateVisualizationV1(CreateVisualizationRequest) returns (Visualization) {
    option (google.api.http) = {
      post: "/apis/v2beta1/visualizations/{namespace}"
      body: "visualization"
    };
  }
}

message Visualization {
  // Type of visualization to be generated.
  // This is required when creating the pipeline through CreateVisualization
  // API.
  enum Type {
    // ROC curve.
    TYPE_ROC_CURVE = 0;
    
    // TFDV.
    TFDV = 1;
    
    // TFMA.
    TFMA = 2;

    // TABLE data.
    TABLE = 3;

    // Custom visualization.
    CUSTOM = 4;
  };

  // Type of the visualization
  Type type = 1;

  // Path pattern of input data to be used during generation of visualizations.
  // This is required when creating the pipeline through CreateVisualization
  // API.
  string source = 2;

  // Variables to be used during generation of a visualization.
  // This should be provided as a JSON string.
  // This is required when creating the pipeline through CreateVisualization
  // API.
  string arguments = 3;

  // Output. Generated visualization html.
  string html = 4;

  // In case any error happens when generating visualizations, only
  // visualization ID and the error message are returned. Client has the
  // flexibility of choosing how to handle the error.
  string error = 5;
}

// Create visualization by providing the type of visualization that is desired
// and input data paths. Input dat paths are assumed to be unique and are used
// for determining output path.
message CreateVisualizationRequest {
  // Visualizeing data.
  Visualization visualization = 1;
  
  // Namespace
  string namespace = 2;
}