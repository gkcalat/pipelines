// Code generated by go-swagger; DO NOT EDIT.

package run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// APIRunDetail The runtime detail of Run.
// swagger:model apiRunDetail
type APIRunDetail struct {

	// The context of the pipeline.
	PipelineContext *MlMetadataContext `json:"pipeline_context,omitempty"`

	// The context of the current Run.
	PipelineRunContext *MlMetadataContext `json:"pipeline_run_context,omitempty"`

	// The runtime details of the tasks under the Run.
	TaskDetails []*APIPipelineTaskDetail `json:"task_details"`
}

// Validate validates this api run detail
func (m *APIRunDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePipelineContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineRunContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIRunDetail) validatePipelineContext(formats strfmt.Registry) error {

	if swag.IsZero(m.PipelineContext) { // not required
		return nil
	}

	if m.PipelineContext != nil {
		if err := m.PipelineContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipeline_context")
			}
			return err
		}
	}

	return nil
}

func (m *APIRunDetail) validatePipelineRunContext(formats strfmt.Registry) error {

	if swag.IsZero(m.PipelineRunContext) { // not required
		return nil
	}

	if m.PipelineRunContext != nil {
		if err := m.PipelineRunContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipeline_run_context")
			}
			return err
		}
	}

	return nil
}

func (m *APIRunDetail) validateTaskDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskDetails); i++ {
		if swag.IsZero(m.TaskDetails[i]) { // not required
			continue
		}

		if m.TaskDetails[i] != nil {
			if err := m.TaskDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("task_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIRunDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIRunDetail) UnmarshalBinary(b []byte) error {
	var res APIRunDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
