// Code generated by go-swagger; DO NOT EDIT.

package run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PipelineTaskDetailTaskState Specifies state of TaskExecution
//
// - STATE_UNSPECIFIED: Unspecified.
//  - PENDING: Specifies pending state for the task.
//  - RUNNING: Specifies task is being executed.
//  - SUCCEEDED: Specifies task completed successfully.
//  - CANCEL_PENDING: Specifies Task cancel is in pending state.
//  - CANCELLING: Specifies task is being cancelled.
//  - CANCELLED: Specifies task was cancelled.
//  - FAILED: Specifies task failed.
//  - SKIPPED: Specifies task was skipped due to cache hit.
//  - NOT_TRIGGERED: Specifies that the task was not triggered because the task's trigger
// policy is not satisfied. The trigger policy is specified in the
// `condition` field of [Run.pipeline_spec][].
// swagger:model PipelineTaskDetailTaskState
type PipelineTaskDetailTaskState string

const (

	// PipelineTaskDetailTaskStateSTATEUNSPECIFIED captures enum value "STATE_UNSPECIFIED"
	PipelineTaskDetailTaskStateSTATEUNSPECIFIED PipelineTaskDetailTaskState = "STATE_UNSPECIFIED"

	// PipelineTaskDetailTaskStatePENDING captures enum value "PENDING"
	PipelineTaskDetailTaskStatePENDING PipelineTaskDetailTaskState = "PENDING"

	// PipelineTaskDetailTaskStateRUNNING captures enum value "RUNNING"
	PipelineTaskDetailTaskStateRUNNING PipelineTaskDetailTaskState = "RUNNING"

	// PipelineTaskDetailTaskStateSUCCEEDED captures enum value "SUCCEEDED"
	PipelineTaskDetailTaskStateSUCCEEDED PipelineTaskDetailTaskState = "SUCCEEDED"

	// PipelineTaskDetailTaskStateCANCELPENDING captures enum value "CANCEL_PENDING"
	PipelineTaskDetailTaskStateCANCELPENDING PipelineTaskDetailTaskState = "CANCEL_PENDING"

	// PipelineTaskDetailTaskStateCANCELLING captures enum value "CANCELLING"
	PipelineTaskDetailTaskStateCANCELLING PipelineTaskDetailTaskState = "CANCELLING"

	// PipelineTaskDetailTaskStateCANCELLED captures enum value "CANCELLED"
	PipelineTaskDetailTaskStateCANCELLED PipelineTaskDetailTaskState = "CANCELLED"

	// PipelineTaskDetailTaskStateFAILED captures enum value "FAILED"
	PipelineTaskDetailTaskStateFAILED PipelineTaskDetailTaskState = "FAILED"

	// PipelineTaskDetailTaskStateSKIPPED captures enum value "SKIPPED"
	PipelineTaskDetailTaskStateSKIPPED PipelineTaskDetailTaskState = "SKIPPED"

	// PipelineTaskDetailTaskStateNOTTRIGGERED captures enum value "NOT_TRIGGERED"
	PipelineTaskDetailTaskStateNOTTRIGGERED PipelineTaskDetailTaskState = "NOT_TRIGGERED"
)

// for schema
var pipelineTaskDetailTaskStateEnum []interface{}

func init() {
	var res []PipelineTaskDetailTaskState
	if err := json.Unmarshal([]byte(`["STATE_UNSPECIFIED","PENDING","RUNNING","SUCCEEDED","CANCEL_PENDING","CANCELLING","CANCELLED","FAILED","SKIPPED","NOT_TRIGGERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pipelineTaskDetailTaskStateEnum = append(pipelineTaskDetailTaskStateEnum, v)
	}
}

func (m PipelineTaskDetailTaskState) validatePipelineTaskDetailTaskStateEnum(path, location string, value PipelineTaskDetailTaskState) error {
	if err := validate.Enum(path, location, value, pipelineTaskDetailTaskStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this pipeline task detail task state
func (m PipelineTaskDetailTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePipelineTaskDetailTaskStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
