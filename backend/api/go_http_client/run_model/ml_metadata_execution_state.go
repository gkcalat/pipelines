// Code generated by go-swagger; DO NOT EDIT.

package run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// MlMetadataExecutionState The state of the Execution. The state transitions are
//   NEW -> RUNNING -> COMPLETE | CACHED | FAILED | CANCELED
// CACHED means the execution is skipped due to cached results.
// CANCELED means the execution is skipped due to precondition not met. It is
// different from CACHED in that a CANCELED execution will not have any event
// associated with it. It is different from FAILED in that there is no
// unexpected error happened and it is regarded as a normal state.
// swagger:model ml_metadataExecutionState
type MlMetadataExecutionState string

const (

	// MlMetadataExecutionStateUNKNOWN captures enum value "UNKNOWN"
	MlMetadataExecutionStateUNKNOWN MlMetadataExecutionState = "UNKNOWN"

	// MlMetadataExecutionStateNEW captures enum value "NEW"
	MlMetadataExecutionStateNEW MlMetadataExecutionState = "NEW"

	// MlMetadataExecutionStateRUNNING captures enum value "RUNNING"
	MlMetadataExecutionStateRUNNING MlMetadataExecutionState = "RUNNING"

	// MlMetadataExecutionStateCOMPLETE captures enum value "COMPLETE"
	MlMetadataExecutionStateCOMPLETE MlMetadataExecutionState = "COMPLETE"

	// MlMetadataExecutionStateFAILED captures enum value "FAILED"
	MlMetadataExecutionStateFAILED MlMetadataExecutionState = "FAILED"

	// MlMetadataExecutionStateCACHED captures enum value "CACHED"
	MlMetadataExecutionStateCACHED MlMetadataExecutionState = "CACHED"

	// MlMetadataExecutionStateCANCELED captures enum value "CANCELED"
	MlMetadataExecutionStateCANCELED MlMetadataExecutionState = "CANCELED"
)

// for schema
var mlMetadataExecutionStateEnum []interface{}

func init() {
	var res []MlMetadataExecutionState
	if err := json.Unmarshal([]byte(`["UNKNOWN","NEW","RUNNING","COMPLETE","FAILED","CACHED","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mlMetadataExecutionStateEnum = append(mlMetadataExecutionStateEnum, v)
	}
}

func (m MlMetadataExecutionState) validateMlMetadataExecutionStateEnum(path, location string, value MlMetadataExecutionState) error {
	if err := validate.Enum(path, location, value, mlMetadataExecutionStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this ml metadata execution state
func (m MlMetadataExecutionState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMlMetadataExecutionStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
