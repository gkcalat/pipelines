// Code generated by go-swagger; DO NOT EDIT.

package run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIRun api run
// swagger:model apiRun
type APIRun struct {

	// Run creation time.
	// Format: date-time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// Optional input field. Describing the purpose of the run
	Description string `json:"description,omitempty"`

	// Run end time.
	// Format: date-time
	EndTime strfmt.DateTime `json:"end_time,omitempty"`

	// The error that occurred during Run execution.
	// Only populated when the Run's state is FAILED or CANCELLED.
	Error *APIStatus `json:"error,omitempty"`

	// Output. Unique Run ID. Generated by API server.
	ID string `json:"id,omitempty"`

	// Required input field. Name provided by user,
	// or auto generated if Run is created by scheduled job. Not unique.
	Name string `json:"name,omitempty"`

	// Optional input field. The ID of the Pipeline user used for this Run.
	PipelineID string `json:"pipeline_id,omitempty"`

	// Optional input field. The pipeline spec.
	PipelineSpec interface{} `json:"pipeline_spec,omitempty"`

	// The details of the Run.
	RunDetail *APIRunDetail `json:"run_detail,omitempty"`

	// Runtime config of the pipeline.
	RuntimeConfig *APIRunRuntimeConfig `json:"runtime_config,omitempty"`

	// Optional input field. Specify which Kubernetes service account this Run uses.
	ServiceAccount string `json:"service_account,omitempty"`

	// Run start time.
	// Format: date-time
	StartTime strfmt.DateTime `json:"start_time,omitempty"`

	// The latest state of the Run.
	State APIRunState `json:"state,omitempty"`

	// A list of task status. This field keeps a record of task status evolving
	// over time.
	StateHistory []*RunRunStatus `json:"state_history"`

	// Output. Specify whether the Run is in archived or available mode.
	StorageState APIRunStorageState `json:"storage_state,omitempty"`

	// Timestamp when the Run was most recently updated.
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this api run
func (m *APIRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIRun) validateCreateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIRun) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIRun) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *APIRun) validateRunDetail(formats strfmt.Registry) error {

	if swag.IsZero(m.RunDetail) { // not required
		return nil
	}

	if m.RunDetail != nil {
		if err := m.RunDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("run_detail")
			}
			return err
		}
	}

	return nil
}

func (m *APIRun) validateRuntimeConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.RuntimeConfig) { // not required
		return nil
	}

	if m.RuntimeConfig != nil {
		if err := m.RuntimeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtime_config")
			}
			return err
		}
	}

	return nil
}

func (m *APIRun) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIRun) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *APIRun) validateStateHistory(formats strfmt.Registry) error {

	if swag.IsZero(m.StateHistory) { // not required
		return nil
	}

	for i := 0; i < len(m.StateHistory); i++ {
		if swag.IsZero(m.StateHistory[i]) { // not required
			continue
		}

		if m.StateHistory[i] != nil {
			if err := m.StateHistory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("state_history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIRun) validateStorageState(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageState) { // not required
		return nil
	}

	if err := m.StorageState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storage_state")
		}
		return err
	}

	return nil
}

func (m *APIRun) validateUpdateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIRun) UnmarshalBinary(b []byte) error {
	var res APIRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
