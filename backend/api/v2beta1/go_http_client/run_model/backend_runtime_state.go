// Code generated by go-swagger; DO NOT EDIT.

package run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// BackendRuntimeState Describes the runtime state of an entity.
//
//  - RUNTIMESTATE_UNSPECIFIED: Default value. This value is not used.
//  - PENDING: Service is preparing to execute an entity.
//  - RUNNING: Entity execution is in progress.
//  - SUCCEEDED: Entity completed successfully.
//  - SKIPPED: Entity has been skipped. For example, due to caching.
//  - FAILED: Entity execution has failed.
//  - CANCELING: Entity is being canceled. From this state, an entity may only
// change its state to SUCCEEDED, FAILED or CANCELED.
//  - CANCELED: Entity has been canceled.
//  - PAUSED: Entity has been paused. It can be resumed.
// swagger:model backendRuntimeState
type BackendRuntimeState string

const (

	// BackendRuntimeStateRUNTIMESTATEUNSPECIFIED captures enum value "RUNTIMESTATE_UNSPECIFIED"
	BackendRuntimeStateRUNTIMESTATEUNSPECIFIED BackendRuntimeState = "RUNTIMESTATE_UNSPECIFIED"

	// BackendRuntimeStatePENDING captures enum value "PENDING"
	BackendRuntimeStatePENDING BackendRuntimeState = "PENDING"

	// BackendRuntimeStateRUNNING captures enum value "RUNNING"
	BackendRuntimeStateRUNNING BackendRuntimeState = "RUNNING"

	// BackendRuntimeStateSUCCEEDED captures enum value "SUCCEEDED"
	BackendRuntimeStateSUCCEEDED BackendRuntimeState = "SUCCEEDED"

	// BackendRuntimeStateSKIPPED captures enum value "SKIPPED"
	BackendRuntimeStateSKIPPED BackendRuntimeState = "SKIPPED"

	// BackendRuntimeStateFAILED captures enum value "FAILED"
	BackendRuntimeStateFAILED BackendRuntimeState = "FAILED"

	// BackendRuntimeStateCANCELING captures enum value "CANCELING"
	BackendRuntimeStateCANCELING BackendRuntimeState = "CANCELING"

	// BackendRuntimeStateCANCELED captures enum value "CANCELED"
	BackendRuntimeStateCANCELED BackendRuntimeState = "CANCELED"

	// BackendRuntimeStatePAUSED captures enum value "PAUSED"
	BackendRuntimeStatePAUSED BackendRuntimeState = "PAUSED"
)

// for schema
var backendRuntimeStateEnum []interface{}

func init() {
	var res []BackendRuntimeState
	if err := json.Unmarshal([]byte(`["RUNTIMESTATE_UNSPECIFIED","PENDING","RUNNING","SUCCEEDED","SKIPPED","FAILED","CANCELING","CANCELED","PAUSED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backendRuntimeStateEnum = append(backendRuntimeStateEnum, v)
	}
}

func (m BackendRuntimeState) validateBackendRuntimeStateEnum(path, location string, value BackendRuntimeState) error {
	if err := validate.Enum(path, location, value, backendRuntimeStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this backend runtime state
func (m BackendRuntimeState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackendRuntimeStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
