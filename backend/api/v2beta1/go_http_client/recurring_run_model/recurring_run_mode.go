// Code generated by go-swagger; DO NOT EDIT.

package recurring_run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// RecurringRunMode Required input.
//
//  - MODE_DISABLED: The recurring run won't schedule any run if disabled.
// swagger:model RecurringRunMode
type RecurringRunMode string

const (

	// RecurringRunModeMODEUNSPECIFIED captures enum value "MODE_UNSPECIFIED"
	RecurringRunModeMODEUNSPECIFIED RecurringRunMode = "MODE_UNSPECIFIED"

	// RecurringRunModeMODEENABLED captures enum value "MODE_ENABLED"
	RecurringRunModeMODEENABLED RecurringRunMode = "MODE_ENABLED"

	// RecurringRunModeMODEDISABLED captures enum value "MODE_DISABLED"
	RecurringRunModeMODEDISABLED RecurringRunMode = "MODE_DISABLED"
)

// for schema
var recurringRunModeEnum []interface{}

func init() {
	var res []RecurringRunMode
	if err := json.Unmarshal([]byte(`["MODE_UNSPECIFIED","MODE_ENABLED","MODE_DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recurringRunModeEnum = append(recurringRunModeEnum, v)
	}
}

func (m RecurringRunMode) validateRecurringRunModeEnum(path, location string, value RecurringRunMode) error {
	if err := validate.Enum(path, location, value, recurringRunModeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this recurring run mode
func (m RecurringRunMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecurringRunModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
