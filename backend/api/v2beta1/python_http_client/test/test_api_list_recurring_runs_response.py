# coding: utf-8

"""
    Kubeflow Pipelines API

    This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition.

    Contact: kubeflow-pipelines@google.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kfp_server_api
from kfp_server_api.models.api_list_recurring_runs_response import ApiListRecurringRunsResponse  # noqa: E501
from kfp_server_api.rest import ApiException

class TestApiListRecurringRunsResponse(unittest.TestCase):
    """ApiListRecurringRunsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ApiListRecurringRunsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kfp_server_api.models.api_list_recurring_runs_response.ApiListRecurringRunsResponse()  # noqa: E501
        if include_optional :
            return ApiListRecurringRunsResponse(
                recurring_runs = [
                    kfp_server_api.models.api_recurring_run.apiRecurringRun(
                        recurring_run_id = '0', 
                        display_name = '0', 
                        description = '0', 
                        pipeline_id = '0', 
                        pipeline_spec = kfp_server_api.models.pipeline_spec.pipeline_spec(), 
                        runtime_config = kfp_server_api.models.api_runtime_config.apiRuntimeConfig(
                            parameters = {
                                'key' : None
                                }, 
                            pipeline_root = '0', ), 
                        service_account = '0', 
                        max_concurrency = '0', 
                        trigger = kfp_server_api.models.api_trigger.apiTrigger(
                            cron_schedule = kfp_server_api.models.api_cron_schedule.apiCronSchedule(
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                cron = '0', ), 
                            periodic_schedule = kfp_server_api.models.api_periodic_schedule.apiPeriodicSchedule(
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                interval_second = '0', ), ), 
                        mode = 'MODE_UNSPECIFIED', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        status = 'STATUS_UNSPECIFIED', 
                        error = '0', 
                        no_catchup = True, 
                        namespace = '0', 
                        experiment_id = '0', )
                    ], 
                total_size = 56, 
                next_page_token = '0'
            )
        else :
            return ApiListRecurringRunsResponse(
        )

    def testApiListRecurringRunsResponse(self):
        """Test ApiListRecurringRunsResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
