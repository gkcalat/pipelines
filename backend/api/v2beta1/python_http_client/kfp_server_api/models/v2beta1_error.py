# coding: utf-8

"""
    Kubeflow Pipelines API

    This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition.

    Contact: kubeflow-pipelines@google.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kfp_server_api.configuration import Configuration


class V2beta1Error(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error_message': 'str',
        'error_details': 'str'
    }

    attribute_map = {
        'error_message': 'error_message',
        'error_details': 'error_details'
    }

    def __init__(self, error_message=None, error_details=None, local_vars_configuration=None):  # noqa: E501
        """V2beta1Error - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._error_message = None
        self._error_details = None
        self.discriminator = None

        if error_message is not None:
            self.error_message = error_message
        if error_details is not None:
            self.error_details = error_details

    @property
    def error_message(self):
        """Gets the error_message of this V2beta1Error.  # noqa: E501

        Error message.  # noqa: E501

        :return: The error_message of this V2beta1Error.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this V2beta1Error.

        Error message.  # noqa: E501

        :param error_message: The error_message of this V2beta1Error.  # noqa: E501
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def error_details(self):
        """Gets the error_details of this V2beta1Error.  # noqa: E501

        Error details.  # noqa: E501

        :return: The error_details of this V2beta1Error.  # noqa: E501
        :rtype: str
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this V2beta1Error.

        Error details.  # noqa: E501

        :param error_details: The error_details of this V2beta1Error.  # noqa: E501
        :type error_details: str
        """

        self._error_details = error_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2beta1Error):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2beta1Error):
            return True

        return self.to_dict() != other.to_dict()
