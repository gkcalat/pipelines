{
  "swagger": "2.0",
  "info": {
    "title": "backend/api/v2beta1/run.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/v2beta1/experiments/{run.experiment_id}/runs": {
      "post": {
        "summary": "Creates a new run in the experiment specified by the experiment ID. If experiment ID is not specified, the run is created in the default experiment.",
        "operationId": "CreateRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRun"
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run.experiment_id",
            "description": "Id of the experiment this run belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRun"
            }
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs": {
      "get": {
        "summary": "Find all runs in an experiment given experiment id. Finds all runs across all experiments if experiment id is not specified.",
        "operationId": "ListRuns",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListRunsResponse"
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page_token",
            "description": "A page token to request the next page of results. The token is acquired\nfrom the nextPageToken field of the response from the previous\nListRuns call or can be omitted when fetching the first page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "The number of runs to be listed per page. If there are more runs than this\nnumber, the response message will contain a nextPageToken field you can use\nto fetch the next page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_by",
            "description": "Can be format of \"field_name\", \"field_name asc\" or \"field_name desc\"\n(Example, \"name asc\" or \"id desc\"). Ascending by default.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Optional input field. Filters based on the namespace.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "A url-encoded, JSON-serialized Filter protocol buffer (see\n[filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The ID of the experiment to be retrieved. If empty, list runs across all experiments.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}": {
      "get": {
        "summary": "Finds a specific run by ID.",
        "operationId": "GetRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRun"
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      },
      "delete": {
        "summary": "Deletes a run.",
        "operationId": "DeleteRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}/nodes/{node_id}/artifacts/{artifact_name}:read": {
      "get": {
        "summary": "Finds a run's artifact data.",
        "operationId": "ReadArtifact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadArtifactResponse"
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "node_id",
            "description": "The ID of the running node.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "artifact_name",
            "description": "The name of the artifact.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}:archive": {
      "post": {
        "summary": "Archives a run.",
        "operationId": "ArchiveRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be archived.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}:reportMetrics": {
      "post": {
        "summary": "ReportRunMetrics reports metrics of a run. Each metric is reported in its\nown transaction, so this API accepts partial failures. Metric can be\nuniquely identified by (run_id, node_id, name). Duplicate reporting will be\nignored by the API. First reporting wins.",
        "operationId": "ReportRunMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReportRunMetricsResponse"
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "Required. The parent run ID of the metric.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiReportRunMetricsRequest"
            }
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}:terminate": {
      "post": {
        "summary": "Terminates an active run.",
        "operationId": "TerminateRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be terminated.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}:unarchive": {
      "post": {
        "summary": "Restores an archived run.",
        "operationId": "UnarchiveRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be restored.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    }
  },
  "definitions": {
    "ReportRunMetricsResponseMetricStatus": {
      "type": "string",
      "enum": [
        "METRICSTATUS_UNSPECIFIED",
        "OK",
        "INVALID_ARGUMENT",
        "DUPLICATE_REPORTING",
        "INTERNAL_ERROR"
      ],
      "default": "METRICSTATUS_UNSPECIFIED",
      "description": "Returned status of the metric.\n\n - METRICSTATUS_UNSPECIFIED: Default value if not present.\n - OK: Indicates successful reporting.\n - INVALID_ARGUMENT: Indicates that the payload of the metric is invalid.\n - DUPLICATE_REPORTING: Indicates that the metric has been reported before.\n - INTERNAL_ERROR: Indicates that something went wrong in the server."
    },
    "RunMetricFormat": {
      "type": "string",
      "enum": [
        "FORMAT_UNSPECIFIED",
        "RAW",
        "PERCENTAGE"
      ],
      "default": "FORMAT_UNSPECIFIED",
      "description": " - FORMAT_UNSPECIFIED: Default value if not present.\n - RAW: Display value as its raw format.\n - PERCENTAGE: Display value in percentage format."
    },
    "apiArtifactList": {
      "type": "object",
      "properties": {
        "artifact_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "A list of artifact metadata ids."
        }
      },
      "description": "A list of artifact metadata."
    },
    "apiError": {
      "type": "object",
      "properties": {
        "error_message": {
          "type": "string",
          "description": "Error message."
        },
        "error_details": {
          "type": "string",
          "description": "Error details."
        }
      },
      "description": "Error message."
    },
    "apiListRunsResponse": {
      "type": "object",
      "properties": {
        "runs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRun"
          },
          "description": "List of runs."
        },
        "total_size": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of runs for the given query."
        },
        "next_page_token": {
          "type": "string",
          "description": "The token to list the next page of runs."
        }
      }
    },
    "apiPipelineTaskDetail": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "description": "The system generated ID of the task."
        },
        "parent_task_id": {
          "type": "string",
          "description": "The id of the parent task if the task is within a component scope.\nEmpty if the task is at the root level."
        },
        "task_name": {
          "type": "string",
          "description": "The user specified name of the task that is defined in\n[Pipeline.spec][]."
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "description": "Task create time."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Task start time."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "Task end time."
        },
        "executor_detail": {
          "$ref": "#/definitions/apiPipelineTaskExecutorDetail",
          "description": "The detailed execution info."
        },
        "state": {
          "$ref": "#/definitions/apiRuntimeState",
          "description": "State of the task."
        },
        "execution_id": {
          "type": "string",
          "format": "int64",
          "description": "The execution metadata of the task."
        },
        "error": {
          "$ref": "#/definitions/apiError",
          "description": "The error that occurred during task execution.\nOnly populated when the task's state is FAILED or CANCELED."
        },
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiArtifactList"
          },
          "description": "The runtime input artifacts of the task."
        },
        "outputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiArtifactList"
          },
          "description": "The runtime output artifacts of the task."
        },
        "state_history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRuntimeStatus"
          },
          "description": "A list of task statuses. This field keeps a record of task status evolving\nover time."
        }
      },
      "description": "The runtime detail of a task execution."
    },
    "apiPipelineTaskExecutorDetail": {
      "type": "object",
      "properties": {
        "main_job": {
          "type": "string",
          "description": "The name of the job for the main container execution."
        },
        "pre_caching_check_job": {
          "type": "string",
          "description": "The name of the job for the pre-caching-check container\nexecution. This job will be available if the\nRun.pipeline_spec specifies the `pre_caching_check` hook in\nthe lifecycle events."
        },
        "failed_main_jobs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The names of the previously failed job for the main container\nexecutions. The list includes the all attempts in chronological order."
        },
        "failed_pre_caching_check_jobs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The names of the previously failed job for the\npre-caching-check container executions. This job will be available if the\nRun.pipeline_spec specifies the `pre_caching_check` hook in\nthe lifecycle events.\nThe list includes the all attempts in chronological order."
        }
      },
      "description": "The runtime detail of a PipelineTask executor."
    },
    "apiReadArtifactResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The bytes of the artifact content."
        }
      }
    },
    "apiReportRunMetricsRequest": {
      "type": "object",
      "properties": {
        "run_id": {
          "type": "string",
          "description": "Required. The parent run ID of the metric."
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRunMetric"
          },
          "description": "List of metrics to report."
        }
      }
    },
    "apiReportRunMetricsResponse": {
      "type": "object",
      "properties": {
        "metric_name": {
          "type": "string",
          "description": "Output. The name of the metric."
        },
        "metric_node_id": {
          "type": "string",
          "description": "Output. The ID of the node which reports the metric."
        },
        "status": {
          "$ref": "#/definitions/ReportRunMetricsResponseMetricStatus",
          "description": "Output. The status of the metric reporting."
        },
        "message": {
          "type": "string",
          "description": "Output. The detailed message of the error of the reporting."
        }
      }
    },
    "apiRun": {
      "type": "object",
      "properties": {
        "run_id": {
          "type": "string",
          "description": "Output. Unique Run ID. Generated by API server."
        },
        "display_name": {
          "type": "string",
          "description": "Required input field. Name provided by user,\nor auto generated if Run is created by scheduled job. Not unique."
        },
        "storage_state": {
          "$ref": "#/definitions/apiStorageState",
          "description": "Output. Specifies whether this run is in archived or available mode."
        },
        "description": {
          "type": "string",
          "description": "Optional input field. Describing the purpose of the Run."
        },
        "pipeline_id": {
          "type": "string",
          "description": "The ID of the pipeline user uploaded before."
        },
        "pipeline_spec": {
          "type": "object",
          "description": "The pipeline spec."
        },
        "runtime_config": {
          "$ref": "#/definitions/apiRuntimeConfig",
          "description": "Runtime config of the pipeline."
        },
        "service_account": {
          "type": "string",
          "description": "Optional input field. Specifies which Kubernetes service account this run uses."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time the run was created."
        },
        "scheduled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output. When this run is scheduled to run. This could be different from\ncreated_at. For example, if a run is from a backfilling job that was\nsupposed to run 2 month ago, the scheduled_at is 2 month ago,\nv.s. created_at is the current time."
        },
        "finished_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time this run is finished."
        },
        "state": {
          "$ref": "#/definitions/apiRuntimeState",
          "description": "Output. State of a Run."
        },
        "error": {
          "$ref": "#/definitions/apiError",
          "description": "In case any error happens retrieving a run field, only run ID\nand the error message is returned. Client has the flexibility of choosing\nhow to handle error. This is especially useful during listing call."
        },
        "namespace": {
          "type": "string",
          "description": "Namespace this run belongs to."
        },
        "experiment_id": {
          "type": "string",
          "description": "Id of the experiment this run belongs to."
        },
        "runtime_details": {
          "$ref": "#/definitions/apiRuntimeDetails",
          "description": "Output. The runtime details of a Run."
        },
        "state_history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRuntimeStatus"
          },
          "description": "Output. A list of Run statuses. This field keeps a record of status\nevolving over time.\nBeing discussed. Planned as a P1 feature."
        }
      }
    },
    "apiRunMetric": {
      "type": "object",
      "properties": {
        "display_name": {
          "type": "string",
          "description": "Required. The user defined name of the metric. It must between 1 and 63\ncharacters long and must conform to the following regular expression:\n`[a-z]([-a-z0-9]*[a-z0-9])?`."
        },
        "node_id": {
          "type": "string",
          "description": "Required. The runtime node ID which reports the metric. The node ID can be\nfound in the RunDetail.workflow.Status. Metric with same (node_id, name)\nare considerd as duplicate. Only the first reporting will be recorded. Max\nlength is 128."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "The number value of the metric."
        },
        "format": {
          "$ref": "#/definitions/RunMetricFormat",
          "description": "The display format of metric."
        }
      }
    },
    "apiRuntimeConfig": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "description": "The runtime parameters of the Pipeline. The parameters will be\nused to replace the placeholders at runtime."
        },
        "pipeline_root": {
          "type": "string",
          "title": "A path in a object store bucket which will be treated as the root\noutput directory of the pipeline. It is used by the system to\ngenerate the paths of output artifacts. \nRef:(https://www.kubeflow.org/docs/components/pipelines/pipeline-root/)"
        }
      },
      "description": "The runtime config."
    },
    "apiRuntimeDetails": {
      "type": "object",
      "properties": {
        "pipeline_context_id": {
          "type": "string",
          "format": "int64",
          "description": "The context id of the pipeline."
        },
        "pipeline_run_context_id": {
          "type": "string",
          "format": "int64",
          "description": "The context id of the current Run."
        },
        "task_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPipelineTaskDetail"
          },
          "description": "The runtime details of the tasks under the Run."
        }
      },
      "description": "The runtime details of a Run."
    },
    "apiRuntimeState": {
      "type": "string",
      "enum": [
        "RUNTIMESTATE_UNSPECIFIED",
        "PENDING",
        "RUNNING",
        "SUCCEEDED",
        "SKIPPED",
        "FAILED",
        "CANCELING",
        "CANCELED",
        "PAUSED"
      ],
      "default": "RUNTIMESTATE_UNSPECIFIED",
      "description": "Describes the state of a runtime entity.\n\n - RUNTIMESTATE_UNSPECIFIED: Default value. This value is not used.\n - PENDING: Service is preparing to run an entity.\n - RUNNING: Entity is in progress.\n - SUCCEEDED: Entity completed successfully.\n - SKIPPED: Entity has been skipped.\n - FAILED: Entity failed.\n - CANCELING: Entity is being canceled. From this state, an entity may only go\nto either SUCCEEDED, FAILED or CANCELED.\n - CANCELED: Entity has been canceled.\n - PAUSED: Entity has been stopped, and can be resumed."
    },
    "apiRuntimeStatus": {
      "type": "object",
      "properties": {
        "update_time": {
          "type": "string",
          "format": "date-time",
          "description": "Update time of this state."
        },
        "state": {
          "$ref": "#/definitions/apiRuntimeState",
          "description": "The state of a runtime instance."
        },
        "error": {
          "$ref": "#/definitions/apiError",
          "description": "The error that occurred during the state. May be set when the state is\nany of the non-final states (PENDING/RUNNING/CANCELING) or FAILED state.\nIf the state is FAILED, the error here is final and not going to be\nretried.\nIf the state is a non-final state, the error indicates a system-error\nbeing retried."
        }
      },
      "description": "Timestamped representation of a state with an optional error."
    },
    "apiStatus": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "description": "Error message."
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "Status code."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Any details about the status."
        }
      },
      "description": "Status message representing result of a request."
    },
    "apiStorageState": {
      "type": "string",
      "enum": [
        "STORAGESTATE_UNSPECIFIED",
        "AVAILABLE",
        "ARCHIVED"
      ],
      "default": "STORAGESTATE_UNSPECIFIED",
      "description": "Describes whether an entity is available or archived.\n\n - STORAGESTATE_UNSPECIFIED: Default state. This state in not used\n - AVAILABLE: Entity is available.\n - ARCHIVED: Entity is archived."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
